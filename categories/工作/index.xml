<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工作 on sadanspace&#39;s blog</title>
    <link>https://sadanspace.github.io/categories/%E5%B7%A5%E4%BD%9C/</link>
    <description>Recent content in 工作 on sadanspace&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jun 2020 12:46:27 +0800</lastBuildDate>
    
	<atom:link href="https://sadanspace.github.io/categories/%E5%B7%A5%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>什么是编程范式？</title>
      <link>https://sadanspace.github.io/post/programming-paradiam/</link>
      <pubDate>Sun, 07 Jun 2020 12:46:27 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/programming-paradiam/</guid>
      <description>编程范式是一种编程方法或者编程风格。简单来说就是程序员对程序的理解或看法（特定概念集），基于这些看法来解决具体问题的思考方法。 过程式编程范式</description>
    </item>
    
    <item>
      <title>JVM中类的加载过程和对象的创建过程之间的差别</title>
      <link>https://sadanspace.github.io/post/jvm-class-instance-create/</link>
      <pubDate>Sun, 24 May 2020 15:21:18 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/jvm-class-instance-create/</guid>
      <description>我对JVM类加载过程中的Initailization过程和对象创建过程的错误理解 ​ 最初学习这两个过程的时候，自己就没有完全分清楚，老是觉得这</description>
    </item>
    
    <item>
      <title>JVM进程所使用的内存区域简述</title>
      <link>https://sadanspace.github.io/post/jvm-runtime-data-areas/</link>
      <pubDate>Sun, 17 May 2020 11:42:27 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/jvm-runtime-data-areas/</guid>
      <description>​ ​ JVM进程所能使用的内存空间包括两大部分，分别是直接内存（Directory Memory；或堆外内存off-heap）、运行时数据区（J</description>
    </item>
    
    <item>
      <title>class加载过程中的第一个阶段——加载(Loading)</title>
      <link>https://sadanspace.github.io/post/jvm-loading/</link>
      <pubDate>Tue, 05 May 2020 11:42:27 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/jvm-loading/</guid>
      <description>对于JVM而言，拿来运行的就是class格式的字节码，例如X.class文件。 在JVM中，把一个符合JVM规范的class字节码加载到内存中</description>
    </item>
    
    <item>
      <title>JVM、JVM规范、JVM实现是什么关系？</title>
      <link>https://sadanspace.github.io/post/jvm-jvms-jvmi/</link>
      <pubDate>Sun, 26 Apr 2020 15:21:18 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/jvm-jvms-jvmi/</guid>
      <description>什么是JVM? JVM，Java Virtual Machine的英文缩写。是一个可以运行Java字节码的虚拟机应用程序。 此处的JVM指的就是JVM实现 JVM</description>
    </item>
    
    <item>
      <title>使用Hugo &#43; Github Pages构建个人Blog</title>
      <link>https://sadanspace.github.io/post/build-blog-on-hugo/</link>
      <pubDate>Wed, 04 Mar 2020 22:39:53 +0800</pubDate>
      
      <guid>https://sadanspace.github.io/post/build-blog-on-hugo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>